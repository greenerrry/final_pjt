# Generated by Django 4.2.16 on 2024-11-24 12:15

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('level', models.CharField(blank=True, choices=[('Beginner', '초급'), ('Intermediate', '중급'), ('Advanced', '고급')], max_length=20, null=True)),
                ('goal', models.CharField(blank=True, choices=[('SAT', '수능'), ('TOEIC', '토익'), ('BUSINESS', '비즈니스')], max_length=50, null=True)),
                ('prefer_genre', models.CharField(blank=True, choices=[('Action', '액션'), ('Adventure', '모험'), ('Animation', '애니메이션'), ('Comedy', '코미디'), ('Crime', '범죄'), ('Documentary', '다큐멘터리'), ('Drama', '드라마'), ('Family', '가족'), ('Fantasy', '판타지'), ('History', '역사'), ('Horror', '공포'), ('Music', '음악'), ('Romance', '로맨스'), ('Science Fiction', 'SF'), ('TV Movie', 'TV 영화'), ('Thriller', '스릴러'), ('War', '전쟁'), ('Western', '서구')], max_length=50, null=True)),
                ('points', models.IntegerField(default=0)),
                ('tier', models.CharField(choices=[('Bronze', '브론즈'), ('Siver', '실버'), ('Gold', '골드'), ('Platinum', '플래티넘'), ('Diamond', '다이아몬드'), ('Ruby', '루비')], default='Bronze', max_length=10)),
                ('nickname', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('bio', models.TextField(blank=True, max_length=500, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
                migrations.RunSQL(
            """
            CREATE TRIGGER update_tier_on_points_change
            AFTER UPDATE OF points ON accounts_user
            BEGIN
              UPDATE accounts_user
              SET tier = CASE
                WHEN points >= 500 THEN 'Ruby'
                WHEN points >= 300 THEN 'Diamond'
                WHEN points >= 100 THEN 'Platinum'
                WHEN points >= 50 THEN 'Gold'
                WHEN points >= 10 THEN 'Silver'
                ELSE 'Bronze'
              END
              WHERE id = NEW.id;
            END;
            """,
            reverse_sql="""
            DROP TRIGGER IF EXISTS update_tier_on_points_change;
            """
        ),
    ]
